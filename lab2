-- task1
CREATE TABLE GROUPS(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(50),
    C_VAL NUMBER DEFAULT 0
);

CREATE TABLE STUDENTS(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(50),
    GROUP_ID NUMBER DEFAULT NULL
);

-- task2

CREATE OR REPLACE TRIGGER t_chek_ID_STUDENTS
BEFORE INSERT OR UPDATE OF ID
    ON STUDENTS
    FOR EACH ROW
DECLARE
    rowcount NUMBER;
BEGIN
    SELECT COUNT(*) into rowcount
    FROM STUDENTS
        WHERE STUDENTS.ID = :NEW.ID;
    IF rowcount > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID must be unique.');
            RETURN;
    END IF;
END;


CREATE OR REPLACE TRIGGER t_chek_ID_GROUPS
BEFORE INSERT OR UPDATE OF ID
    ON GROUPS
    FOR EACH ROW
DECLARE
    rowcount NUMBER;
BEGIN
    SELECT COUNT(*) into rowcount
    FROM GROUPS
        WHERE GROUPS.ID = :NEW.ID;
    IF rowcount > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID must be unique.');
            RETURN;
    END IF;
END;


CREATE SEQUENCE STUDENTS_seq
START WITH 1
INCREMENT BY 1
NOMAXVALUE
NOCYCLE
CACHE 20;

CREATE OR REPLACE TRIGGER t_auto_increment_ID_STUDENTS
BEFORE INSERT ON STUDENTS
FOR EACH ROW
DECLARE
    next_id NUMBER;
BEGIN
    SELECT STUDENTS_seq.NEXTVAL INTO next_id FROM dual;
    :NEW.ID := next_id;
END;


CREATE SEQUENCE GROUPS_seq
START WITH 1
INCREMENT BY 1
NOMAXVALUE
NOCYCLE
CACHE 20;

CREATE OR REPLACE TRIGGER t_auto_increment_ID_GROUPS
BEFORE INSERT ON GROUPS
FOR EACH ROW
DECLARE
    next_id NUMBER;
BEGIN
    SELECT GROUPS_seq.NEXTVAL INTO next_id FROM dual;
    :NEW.ID := next_id;
END;


CREATE OR REPLACE TRIGGER t_check_NAME_GROUPS
BEFORE INSERT OR UPDATE OF NAME
    ON GROUPS
    FOR EACH ROW
DECLARE
    rowcount NUMBER;
BEGIN
    SELECT COUNT(*) into rowcount
    FROM GROUPS
        WHERE GROUPS.NAME = :NEW.NAME;
    IF rowcount > 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'NAME must be unique.');
            RETURN;
    END IF;
END;

-- task 3

CREATE OR REPLACE TRIGGER t_cas_del_GROUPS
BEFORE DELETE ON GROUPS
FOR EACH ROW
BEGIN
  DELETE FROM STUDENTS WHERE GROUP_ID = :OLD.ID;
END;

-- task 4

ALTER TRIGGER t_chek_ID_STUDENTS DISABLE;
ALTER TRIGGER t_chek_ID_GROUPS DISABLE;
ALTER TRIGGER t_auto_increment_ID_STUDENTS DISABLE;
ALTER TRIGGER t_auto_increment_ID_GROUPS DISABLE;
ALTER TRIGGER t_check_NAME_GROUPS DISABLE;
ALTER TRIGGER t_cas_del_GROUPS DISABLE;
ALTER TRIGGER t_update_C_VAL_GROUPS DISABLE;

CREATE TABLE HISTORY(
HISTORY_ID NUMBER GENERATED ALWAYS AS IDENTITY
(START WITH 1 INCREMENT BY 1),
STUDENT_OLD_ID NUMBER,
STUDENT_NAME VARCHAR2(50),
STUDENT_GROUP_ID NUMBER,
STUDENT_NEW_ID NUMBER,
OPERATION VARCHAR2(6) NOT NULL CHECK(operation IN ('INSERT', 'UPDATE', 'DELETE')),
DATA DATE NOT NULL,
CONSTRAINT history_pk PRIMARY KEY(HISTORY_ID)
);


CREATE OR REPLACE TRIGGER t_log_STUDENTS
AFTER INSERT OR DELETE OR UPDATE ON STUDENTS
FOR EACH ROW
BEGIN
  CASE
      WHEN INSERTING THEN
        INSERT INTO HISTORY(STUDENT_OLD_ID, STUDENT_NAME, STUDENT_GROUP_ID,
                            STUDENT_NEW_ID, OPERATION, DATA)
        VALUES (NULL, :NEW.NAME, :NEW.GROUP_ID, :NEW.ID, 'INSERT', CURRENT_DATE);
      WHEN UPDATING THEN
        INSERT INTO HISTORY(STUDENT_OLD_ID, STUDENT_NAME, STUDENT_GROUP_ID,
                            STUDENT_NEW_ID, OPERATION, DATA)
        VALUES (:OLD.ID, :OLD.NAME, :OLD.GROUP_ID, :NEW.ID, 'UPDATE', CURRENT_DATE);
      WHEN DELETING THEN
        INSERT INTO HISTORY(STUDENT_OLD_ID, STUDENT_NAME, STUDENT_GROUP_ID,
                            STUDENT_NEW_ID, OPERATION, DATA)
        VALUES (:OLD.ID, :OLD.NAME, :OLD.GROUP_ID, NULL, 'DELETE', CURRENT_DATE);
  END CASE;
END;

INSERT INTO STUDENTS(ID, NAME, GROUP_ID) VALUES (2, 'Oleg', 4);

DELETE FROM STUDENTS;
DELETE FROM HISTORY;

UPDATE STUDENTS
SET NAME = 'Ilya',
    ID = 3,
    GROUP_ID = 5
WHERE NAME = 'Oleg';

SELECT * FROM STUDENTS;
SELECT * FROM HISTORY;

-- task 5

CREATE OR REPLACE PROCEDURE MY_BACKUP(D1 IN DATE, D2 IN VARCHAR2)
IS
    CURSOR mycursor IS
    SELECT * FROM HISTORY
    WHERE HISTORY.DATA <= D1 + NUMTODSINTERVAL(D2, 'SECOND') AND HISTORY.DATA >= D1;
BEGIN
  FOR log_rec IN mycursor
  LOOP
    IF log_rec.OPERATION = 'INSERT' THEN
      DELETE FROM STUDENTS
      WHERE log_rec.STUDENT_NEW_ID = STUDENTS.ID;
    ELSIF log_rec.OPERATION = 'UPDATE' THEN
      UPDATE STUDENTS SET ID = log_rec.STUDENT_OLD_ID, NAME = log_rec.STUDENT_NAME, GROUP_ID = log_rec.STUDENT_GROUP_ID
      WHERE STUDENTS.ID = log_rec.STUDENT_NEW_ID;
    ELSIF log_rec.OPERATION = 'DELETE' THEN
      INSERT INTO STUDENTS(ID, NAME, GROUP_ID) VALUES (log_rec.STUDENT_OLD_ID, log_rec.STUDENT_NAME, log_rec.STUDENT_GROUP_ID);
    END IF;
    DELETE FROM HISTORY
        WHERE HISTORY_ID = log_rec.HISTORY_ID;
  END LOOP;
END;

DELETE FROM HISTORY;

BEGIN
    MY_BACKUP(CAST(timestamp '2023-03-11 17:09:31' AS DATE), '1000' );
end;
--MY_BACKUP(TO_TIMESTAMP('2023-03-11 14:12:07'), TO_TIMESTAMP('01:00:00'));

ALTER TRIGGER t_chek_ID_STUDENTS ENABLE;
ALTER TRIGGER t_chek_ID_GROUPS ENABLE;
ALTER TRIGGER t_auto_increment_ID_STUDENTS ENABLE;
ALTER TRIGGER t_auto_increment_ID_GROUPS ENABLE;
ALTER TRIGGER t_check_NAME_GROUPS ENABLE;
ALTER TRIGGER t_cas_del_GROUPS ENABLE;
ALTER TRIGGER t_update_C_VAL_GROUPS ENABLE;

-- task 6

CREATE OR REPLACE TRIGGER t_update_C_VAL_GROUPS
BEFORE INSERT OR DELETE OR UPDATE OF GROUP_ID ON STUDENTS
FOR EACH ROW
BEGIN
  CASE
      WHEN INSERTING THEN
        IF :NEW.GROUP_ID IS NOT NULL THEN
            UPDATE GROUPS
            SET   GROUPS.C_VAL = GROUPS.C_VAL + 1
            WHERE :NEW.GROUP_ID = GROUPS.ID;
        END IF;
      WHEN UPDATING THEN
        UPDATE GROUPS
        SET   GROUPS.C_VAL = GROUPS.C_VAL + 1
        WHERE :NEW.GROUP_ID = GROUPS.ID;
        UPDATE GROUPS
        SET   GROUPS.C_VAL = GROUPS.C_VAL - 1
        WHERE :OLD.GROUP_ID = GROUPS.ID;
      WHEN DELETING THEN
        IF :OLD.GROUP_ID IS NOT NULL THEN
            UPDATE GROUPS
            SET   GROUPS.C_VAL = GROUPS.C_VAL - 1
            WHERE :OLD.GROUP_ID = GROUPS.ID;
        END IF;
  END CASE;
END;

INSERT INTO STUDENTS(name, GROUP_ID) VALUES ('Dima', 4);
INSERT INTO GROUPS(name) VALUES ('bb');

DELETE FROM STUDENTS;
DELETE FROM GROUPS WHERE ID = 3;

SELECT * FROM STUDENTS;
SELECT * FROM GROUPS;

UPDATE STUDENTS
SET GROUP_ID = NULL;

